<section>
	<name>IO Model</name>
	<t>
		The client and the server send data to the network, and get
		data from the network.
		This input / output model (IO Model) works with
		both the Phoenix client and Phoenix server.
	</t>
	<t>
		This model support both threaded and non threaded
		implementations.
		For non-threaded systems the data is processed serially
		or however the implementation handles both incoming
		and outgoing data.
		The data flow is the same for both threaded and non threaded
		implementations.
	</t>
	<figure anchor="IOModel">
		<name>IO Data Flow Model - Client and Server</name>
		<artset>
			<artwork align="center" type="ascii-art" src="Drawings/IO-00.txt"/>
			<artwork align="center" type="svg" src="Generated/IO-00.svg"/>
		</artset>
	</figure>
	<t>
		Where:
	</t>
	<dl newline="true">
		<dt>(A) Main Thread</dt>
		<dd>
			<t>
				The main thread processes data and formats it into
				data commands and their payload to be sent to the remote
				endpoint.	Once ready, each command is placed into the <em>"To
				XDR Out Queue"</em> (B).
			</t>
		</dd>
		<dt>(B) To XDR Out Queue</dt>
		<dd>
			This is a first in, first out queue (FIFO).
			Its purpose is to store data until the the
			<em>"To XDR Thread"</em> (C) can process the data.
		</dd>
		<dt>(C) To XDR Thread</dt>
		<dd>
			This thread, takes one packet at at time
			out of the the <em>"To XDR Out Queue"</em> (B).
			Converts it from the native computer format to
			XDR format so it can be process by
			any computer architecture and stores the result
			into the <em>"To Network OUT Queue"</em> (D).
		</dd>
		<dt>(D) To Network Out Queue</dt>
		<dd>
			This FIFO queue stores XDR encoded data until thread (E)
			can send it out to the network.
		</dd>
		<dt>(E) To Network Thread</dt>
		<dd>
			This is the network outbound thread.
			It checks to make sure the network can take data.
			When it can, it takes one or more commands from
			the <em>"To Network Out Queue"</em> (D) and puts them
			in a PacketBody.
			A PacketBody may contain 1 or more commands.
			Then the Pack body and its one or more
			commands is TLS encrypted and sent
			out to the network.
		</dd>
		<dt>(F) From Network Thread</dt>
		<dd>
			<t>
				This is the inbound network thread.
				It waits for incoming data, TLS decrypts the data.
			</t>
			<t>
				The data arrives in PacketBody objects.
				A PacketBody may contain one or more commands.
				This thread then separates them into separate
				commands and stores these separate commands
				into the <em>"From Network In Queue"</em> (G).
			</t>
		</dd>
		<dt>(G) From Network In Queue</dt>
		<dd>
			<t>
				This is a FIFO queue. It stores incoming data packets
				until the XDR decode thread (H) can take them.
			</t>
		</dd>
		<dt>(H) XDR Decode Thread</dt>
		<dd>
			This is the incoming XDR decode thread.
			It takes one packet at a time out of
			the <em>"From Network In Queue"</em> (G),
			converts the network binary data back into native computer
			format.
			Once the data is decoded, it paces the decoded data into
			the <em>"Ready In Queue"</em> (I).
		</dd>
		<dt>(I) Ready In Queue</dt>
		<dd>
			This FIFO queue stores inbound and decoded commands
			until the Dispatch Thread (J) can process the data.
		</dd>
		<dt>(J) Dispatch Thread</dt>
		<dd>
			This is the dispatch thread.
			It takes one command at a time out of
			the <em>"Ready In Queue"</em> (I)
			and dispatches it to the code that can handle the data.
		</dd>
	</dl>
			
</section>
