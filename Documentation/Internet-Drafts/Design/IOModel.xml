<section>
	<name>IO Model</name>
	<t>
		The client and the server send data to the network, and get
		data from the network.
		This input / output model (IO Model) works with
		both the Phoenix client and Phoenix server.
	</t>
	<t>
		This model support both threaded and non threaded
		implementations.
		For non-threaded systems the data is processed serially
		or however the implementation handles both incoming
		and outgoing data.
		The data flow is the same for both threaded and non threaded
		implementations.
	</t>
	<figure anchor="IOModel">
		<name>IO Data Flow Model - Client and Server</name>
		<artset>
			<artwork align="center" type="ascii-art" src="Drawings/IO-00.txt"/>
			<artwork align="center" type="svg" src="Generated/IO-00.svg"/>
		</artset>
	</figure>
	<t>
		Where:
	</t>
	<dl newline="true">
		<dt>(A) Main Thread</dt>
		<dd>
			The main thread processes data and formats it into
			data packets to be sent to the remotes endpoint.
			Once ready, it is placed into the To XDR queue (B).
		</dd>
		<dt>(B) To XDR Queue</dt>
		<dd>
			This is a first in, first out queue (FIFO).
			Its purpose is to store data until the next thread
			can process the data.
		</dd>
		<dt>(C) To XDR Thread</dt>
		<dd>
			An XDR thread, takes one packet at at time
			out of the the XDR OUT queue (B).
			Converts it from the native computer format to
			XDR format so it can be process by
			any computer architecture and stores the result
			into the To Network FIFO (D).
		</dd>
		<dt>(D) To Network Queue</dt>
		<dd>
			This FIFO queue stores XDR encoded data until thread (E)
			can send it out to the network.
		</dd>
		<dt>(E) To Network Thread</dt>
		<dd>
			This is the network outbound thread.
			It checks to make sure the network can take data.
			When it can, it takes one or more packets,
			TLS encrypts the data and sends it out to the network.
		</dd>
		<dt>(F) From Network Thread</dt>
		<dd>
			This is the inbound network thread.
			It waits for incoming data, TLS decrypts the data,
			and when a complete	packet arrives, places the data into the
			From Network Queue (G).
		</dd>
		<dt>(G) From Network Queue</dt>
		<dd>
			This is a FIFO queue. It stores incoming data packets
			until the XDR decode thread (H) can take them.
		</dd>
		<dt>(H) XDR Decode Thread</dt>
		<dd>
			This is the incoming XDR decode thread.
			It takes one packet at a time out of the From Network Queue (G),
			converts the network binary data back into native computer
			format.
			Once the data is decoded, it paces the decoded data into
			the inbound queue (I).
		</dd>
		<dt>(I) Ready To Dispatch Queue</dt>
		<dd>
			This FIFO queue stores inbound and decoded data
			until the Dispatch Thread (J) can process the data.
		</dd>
		<dt>(J) Dispatch Thread</dt>
		<dd>
			This is the dispatch thread.
			It takes one packet at a time out of the inbound queue (I)
			and dispatches it to the code that can handle the data.
		</dd>
	</dl>
			
</section>
