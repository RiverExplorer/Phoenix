<section>
	<name>Main Thread</name>
	<t>
		The main thread in this guide, is referring to the
		thread assigned by the program to be the control
		thread.
		It is the essence of the application.
		All other threads will be referred to as worker threads.
	</t>
	<t>
		The application that initiates the connection is
		called the client.
		The application that is connected to by the initiating
		application is called the server.
	</t>
	<t>
		The functions of a client and server are not isolated.
		It is possible for a server to also be a client for
		another service.
		And any client could be a server to other clients.
		A client in this guide is referring to the client
		side of the protocol, and not to some specific user
		interface.
	</t>
	
	<section>
		<name>Client Side Main thread</name>
		<t>
			A client goes through these generalized steps a startup:
		</t>
		<ol>
			<li>
				<t>
					The client main thread starts up and reads
					any implementation specific configuration information.
					The configuration information will include zero
					or more sets of server data needed to contact Phoenix servers.
				</t>
				<t>
					In the case when zero servers are configured, the
					program waits for server configuration information,
					perhaps from a user.
				</t>
				<t>
					The client may at any time acquire additional
					server connection information and add them to
					the list of valid servers.
				</t>
			</li>
			<li>
				<t>
					The client starts all worker threads and waits for them
					to signal they are ready.
				</t>
			</li>
			<li>
				<t>
					When the worker threads are ready the client
					uses the configuration data, or created for
					a new server, the client then initiates that connection
					to each configured server according to the Phoenix
					protocol specification. See
					<xref target="InitialServerConnection">
					Initial Connection to Server</xref>.
				</t>
			</li>
			<li>
				<t>
					As each server connection is established, the client
					starts its specific tasks.
					Any client may support multiple tasks.
					These could include email, calendaring, network news,
					RSS feeds, remote administrative control, or any
					other tasks designed into the client.
				</t>
				<t>
					In the case of an email client, it would start
					sending folder open packets to the server to
					gather emails.
				</t>
				<t>
					A calendaring client would look for new calendar
					entries or processing requests.
					It would send any pending calendaring request to the server.
					And synchronize differences
					according to calendaring specifications.
				</t>
				<t>
					Some servers could be bulletin boards or news feeds
					with read only access.
					Other server might be submission or data storage
					servers.
				</t>
				<t>
					As each task is determined, the data is gathered
					into A Phoenix command with its payload and
					stored into the To XDR Queue (B) as shown
					in the <xref target="IOModel">IOModel</xref>
				</t>
			</li>
		</ol>
				
	</section>
	
	<section>
		<name>Server Side Main thread</name>
	</section>
	
</section>

