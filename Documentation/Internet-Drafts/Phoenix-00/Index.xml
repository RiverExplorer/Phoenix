<section anchor="INDEX">
	<name>Index</name>

	<section anchor="InterestedHeaders">
		<name>Interested Headers</name>
		<t>
			Some implementation may wish to specify which MIME headers
			it wants to get in the index supplied by the server.
			This is done as part of the folder selection command which
			can supply a list of desired headers.
			Or it can specify a list ID that has already been transmitted.
			When none are supplied, no header index values will be returned.
		</t>
		<t>
			This list can be the same for all folders, or unique to specific folders.
			The client generates a list of interested headers and
			sends an Interested Headers list or list ID to the server when selecting
			a folder.
		</t>
		<section anchor="InterestedHeaders-IndexOP">
			<name>Index Operation (IndexOP)</name>
			<t>
				An Index Operation (IndexOP) is an 8-bit
				unsigned integer in network byte order.
				There are only two (2) values, set list (0), use existing list (1).
			</t>
			<t>
				There are two (2) types of index operations (IndexOP) requests.
				These are 8-bit unsigned integer in network byte order.
				And the IndexOP values are:
			</t>
			<ul>
				<li>
					<t>
						IndexOP = 0
					</t>
					<t>
						Used to set a list of body MIME object, and Body Part,
						interesting headers the client cares about.
					</t>
				</li>
				<li>
					<t>
						IndexOP = 1
					</t>
					<t>
						This indicates that LID is an existing list number to use.
					</t>
				</li>
			</ul>
		</section>
		
		<section anchor="InterestedHeaders-HID">
			<name>Header ID (HID)</name>
			<t>
				A Header ID (HID) is an 8-bit unsigned integer in network byte order.
				The client assigned this 8-bit number to a header name, then
				the client and server references it by ID in packets and replies.
				A client can have up to 254 interested headers per connection.
				The value 255 is reserved for expansion.
			</t>
		</section>
		
		<section anchor="InterestedHeaders-LID">
			<name>List ID (LID)</name>
			<t>
				A List ID (LID) it an 8-bit unsigned integer in network byte order.
				It is used in requests and replies to refer to the interested headers
				list.
				A client can have up to 254 lists per connection.
				The value 255 is reserved for expansion.
			</t>
			<t>
				Restrictions:
			</t>
			<ul>
				<li>
					The list IDs are unique to the connection and do not persist
					across connections.
				</li>
				<li>
					No two lists can have the same ID during a connection.
				</li>
			</ul>
		</section>
		
		<section anchor="InterestedHeaders-Wire">
			<name>Protocol Format</name>
			<t>
				When a folder is opened with the FOLDER_OPEN command,
				it is followed by a	list of interested headers it wants back in
				the folder open reply.
				The list can be empty (a single 32-bit unsigned integer
				set to zero), or contain what follows:
			</t>
			<t>
				The client sets these 3 values into one 32-bit unsigned
				integer in network byte order as shown
				in <xref target="Interisting-S0-01"/>, where:
			</t>
			<ul>
				<li>
					<t>
						IndexOP is used to specify headers the client
						wishes the server to index in MIME objects.
						It must be a zero (0) to set the list definition.
					</t>
				</li>
				<li>
					<t>
						LID is the list ID of the list that client is defining.
						An 8-bit value.
					</t>
				</li>
				<li>
					<t>
						HdrCnt is set by the client to the number of headers in the list.
						This is an 8-bit value from 0 to 254 with 255 reserved for
						expansion.
					</t>
					<t>
						This is a 32-bit unsigned integer in network byte order.
					</t>
				</li>
			</ul>
			<figure anchor="Interisting-S0-01" align="center">
				<name>Setting the Interest List - Header</name>
				<artset>
					<artwork type="ascii-art" src="IndexList-01.txt"/>
					<artwork type="svg" src="IndexList-01.svg"/>
				</artset>
			</figure>

			<t>
				ABNF:
			</t>
			<sourcecode>
Interest Header:32 = 0x00:8 IndexOP:8 LID:8 HdrCnt:8
			</sourcecode>
			
			<section anchor="InterestedHeader-Entry">
				<name>Interested Headers - Single Entry</name>
				<t>
					Followed by the header request information is one or more
					of these single header entries.
					One sent for each unique header to be placed into the header index.
					As shown in  <xref target="Interisting-S0-02"/>, where:
				</t>
				<ul>
					<li>
						<t>
							HID is the client assigned unique header ID
							for the named header.
							This is an 8-bit unsigned integer.
						</t>
					</li>
					<li>
						<t>
							STRING LENGTH is the octet count of the string.
							Any terminating zero (0) is not counted in the length.
						</t>
						<t>
							This is a 24-bit unsigned integer in network byte order.
						</t>
					</li>
					<li>
						<t>
							THE HEADER NAME is the characters that make
							up the MIME header name	that is interesting
							without including any terminating zero (0).
							These are a sequence of 8-bit unsigned integer values
							in network byte order.
						</t>
						<t>
							They are packed into a 32-bit unsigned integer in network
							byte order.
						</t>
						<t>
							When THE HEADER NAME is not a multiple of 32-bits in
							length, the remaining bits are unused and shown as
							zero (0) in this specification.
						</t>
					</li>
				</ul>

				<figure anchor="Interisting-S0-02" align="center">
					<name>Setting the Interest List - Contents</name>
					<artset>
						<artwork type="ascii-art" src="IndexList-02.txt"/>
						<artwork type="svg" src="IndexList-02.svg"/>
					</artset>
				</figure>

				<t>
					ABNF:
				</t>
				<sourcecode>
SingleEntry     = SingleHeader:32 HeaderName822
					
SingleHeader:32 = HID:8 StringLength:24
				</sourcecode>
			</section>
			
			<section anchor="InterestedHeader-GetIndex">
				<name>Interested Headers - Use Existing List</name>
				<t>
					When the IndexOP flag is set to one (1) then it is followed by
					an existing list ID	number.
				</t>
				<t>
					LID, the list ID of an already transmitted list to be used.
				</t>
				<t>
					This is sent as a 32-bit unsigned integer in network byte order.
				</t>
				<figure anchor="Interisting-S0-03" align="center">
					<name>Using Existing Header Index by List ID (LID)</name>
					<artset>
						<artwork type="ascii-art" src="IndexList-03.txt"/>
						<artwork type="svg" src="IndexList-03.svg"/>
					</artset>
				</figure>
				<t>
					ABNF:
				</t>
				<sourcecode>
UseExistingOp:8 = 0x01:8
					
UseExistingList:32 = 0x00:8 UseExistingOp:8 LID:8 0x00:8
				</sourcecode>
			</section>

			<section>
				<name>Example: Setting the Interested Header List</name>
				<t>
					This is an example of the client sending an
					interesting header list to the server.
					The client is asking for the index values
					for the following MIME headers (1) From, and (2) Subject.
					And for the following Body part headers (1) Content-Type.
				</t>
				<figure anchor="Interisting-S0-04" align="center">
					<name>Example Setting a List</name>
					<artset>
						<artwork type="ascii-art" src="IndexList-04.txt"/>
						<artwork type="svg" src="IndexList-04.svg"/>
					</artset>
				</figure>
				<t>
					Where:
				</t>
				<ul>
					<li>
						<t>
							(a): A 32-bit unsigned integer in network byte order
							as described in <xref target="Interisting-S0-01"/>.
						</t>
						<t>The first 8-bits are zero.</t>
						<t>The IndexOP of zero, which means defining a list.</t>
						<t>
							And in this example two (0x02) MIME object headers
							are requested	to be indexed, "From", and "Subject".
						</t>
					</li>
					<li>
						<t>
							(b): A 32-bit unsigned integer in network byte order
							as described in <xref target="Interisting-S0-02"/>.
						</t>
						<t>
							The header ID that the client and server will use to
							to identify the "From" header name will be zero (0)
							in this example.
						</t>
						<t>
							The length of the string "From" is four (4)
							and its length is the lower 24 bits of this entry.
						</t>
					</li>
					<li>
						<t>
							(c) A series of 8-bit unsigned values packed into one or more
							32-bit unsigned integers in network byte order.
						</t>
						<t>
							Each 8-bit value is the value of the letters in "From".
							As "From" is a multiple of 32-bits, no padding is done.
						</t>
					</li>
					<li>
						<t>
							(d): A 32-bit unsigned integer in network byte order
							as described in <xref target="Interisting-S0-02"/>.
						</t>
						<t>
							The header ID that the client and server will use to
							to identify the "Subject" header name will be one (1)
							in this example.
						</t>
						<t>
							The length of the string "Subject" is seven (7)
							and its length is the lower 24 bits of this entry.
						</t>
					</li>
					<li>
						<t>
							(e) A series of 8-bit unsigned values packed into one or more
							32-bit unsigned integers in network byte order.
						</t>
						<t>
							Each 8-bit value is the value of the letters in "Subject".
						</t>
						<t>
							As The length of "Subject" is not a multiple of 32-bits,
							the remaining bits are ignored.
							Shown as zero in this example.
						</t>
					</li>
					<li>
						(f) The two MIME objects headers are done, start of Body Part
						headers, and there is one (1) of them.
						IndexOP and LID are not used here.
					</li>
					<li>
						(g) The second header will be identified as three (3).
						The first body part header is 12 octets long (0xc): 'Content-Type'.
					</li>
					<li>
						(h) The value of the characters for 'Content-Type'.
					</li>
					<li>
						(i) The rest of the value of the characters for 'Content-Type'.
					</li>
				</ul>
			</section>
		</section>
	</section>

	<section anchor="PhoenixString">
		<name>PhoenixString</name>
		<t>
			This protocol references the strings by octet offset into the entire
			message.
			All strings can be referenced by using a total of 8 octets.
			A Phoenix string consists of two parts:
		</t>
		<ul>
			<li>
				Offset: A 32-bit unsigned integer in network byte order.
				The octet count to the start of the string with zero being the
				first octet in the message.
				
			</li>
			<li>
				Length: The length in octets of the string.
				A 32-bit unsigned integer in network byte order.
			</li> 
		</ul>
		<t>
			A Phoenix string over the wire is 8 octets in size.
		</t>
		<figure anchor="PhoenixStringFigure" align="center">
			<name>Phoenix String Format</name>
			<artset>
				<artwork type="ascii-art" src="PhoenixString-00.txt"/>
				<artwork type="svg" src="PhoenixString-00.svg"/>
			</artset>
		</figure>

		<t>
			ABNF:
		</t>
		<sourcecode>
PhoenixString = Offset:32 Length:32 String
		</sourcecode>
	</section>
	
	<section>
		<name>MIME Folder Index</name>
		<t>
			In this specification, a MIME folder is also called a folder.
			And can be files containing MIME objects on a disk that have
			a defined order, or sequence of MIME objects in one file.
		</t>
		<t>
			A folder index is a summary of the contents of a MIME folder.
			It may include the basic header information.
			It does include location information provided as the octet count to the
			start of the beginning of the related target data.
		</t>
		<ul>
			<li>
				An index is an unsigned 32-bit integer in network byte order.
			</li>
			<li>
				A length is an unsigned 32-bit integer in network byte order.
			</li>
		</ul>
		<t>
			For example, if a MIME folder contains 100 MIME messages, then
			the folder index will have 100 message indexes.
			Each message will have header indexes for the interested headers.
			Each message index will	contain 1 or more body part indexes.
			Each body part will have header indexes with zero (0) or more entries.
		</t>
		<section>
			<name>Folder Index Header</name>
			<t>
				A folder index consists of:
			</t>
			<ul>
				<li>
					The entire length of the index as a 32-bit unsigned
					integer in network byte order of what follows this value.
					Allowing the recipient of this index to do one read
					and process later.
				</li>
				<li>
					The number of message indexes in this folder index.
					As an unsigned 32-bit integer in network byte order.
				</li>
			</ul>
			<t>
				The index header is 8 octets, that is followed by
				the each message index:
			</t>
			<figure anchor="FolderIndexHeaderFigure" align="center">
				<name>Folder Index</name>
				<artset>
					<artwork type="ascii-art" src="IndexList-05.txt"/>
					<artwork type="svg" src="IndexList-05.svg"/>
				</artset>
			</figure>
			<t>
				ABNF:
			</t>
			<sourcecode>
FolderIndexHeader = FolderIndexSize:32 MessageCount:32 ArrayOfMsgIndex
			</sourcecode>
			<t>
				The header is followed by an array of message indexes.
				They are an ordered list of references to each message.
				In the order they appear in the folder:
			</t>
		</section>
		<section>
			<name>Message Index</name>
			<ul>
				<li>
					A 32-bit unsigned integer in network byte order that is
					the offset into the folder of the message.
					A Message offset is unique in a MIME folder, it is used both as
					an offset into the MIME folder,
					and as a unique ID within a MIME folder for a message.
				</li>
				<li>
					An a length of the message as a 32-bit unsigned integer
					in network byte order.
				</li>
			</ul>
			<figure anchor="MessageIndexFigure" align="center">
				<name>Message Index</name>
				<artset>
					<artwork type="ascii-art" src="IndexList-07.txt"/>
					<artwork type="svg" src="IndexList-07.svg"/>
				</artset>
			</figure>
			<t>
				ABNF:
			</t>
			<sourcecode>
MessageIndex = OfffsetIntoFolder:32 MessageLength:32 ArrayOfHeaderIndex
				
ArrayOfMsgIndex = MessageIndex*
			</sourcecode>
			<t>
				For each message index is an ordered list of interested headers.
				The interested header list is assignable by the client and body
				part indexes.
				It consists of offsets to the interested headers and associated value.
				Each interested header can be indexed with nine (9) octets.
				and consists of:
			</t>
		</section>

		<section>
			<name>Header Index</name>
			<ul>
				<li>
					ID-CNT:
					A count of matched headers.
					Only matched headers will be included.
					If they are not included, no such header existed
					in the object.
				</li>
				<li>
					<t>
						The number of body parts in this object.
						An unsigned 8-bit number.
						With MIME, body parts may contain body parts.
					</t>
					<t>
						Any MIME preamble and epilogue are not counted as body parts
						A preamble, if it exists, can be easily be calculated as it starts
						as the first	octet after the header area.
						And the epilogue, if it exists, can be calculated as starting as
						the first
						octet after the last MIME boundary.
					</t>
				</li>
				<li>
					Followed by an array of ID-CNT 8-bit client assigned HID values
					that matched.
					Padded to round up to 32-bits.
					The unused bits are ignored and shown as zero in this specification.
				</li>
			</ul>
			<t>
				A single header index consists of the list description,
				followed by the index values.
				There are two header indexes in each Message index.
			</t>
			<ol>
				<li>The first is for the MIME object itself.</li>
				<li>
					The second is for the objects Body Parts.
					This part will not exists exist when it is an RFC-822
					style message or has no body parts.
					Followed by the header index.
					This second part also include an offset to the start
					of the body part itself in the MIME object.
				</li>
			</ol>
			<t>
				A list description is one 8-bit result count,
				followed by the list of matching header ID's (HID).
			</t>
			<t>
				If the list description is not a multiple of 32-bits
				then padding is added and the extra are ignored and shown as
				zero in this specification.
			</t>
			<sourcecode>
-Meta-Data-: Seen,Answered,$NotJunk
			</sourcecode>
			<figure anchor="HeaderIndex2" align="center">
				<name>Header Index</name>
				<artset>
					<artwork type="ascii-art" src="IndexList-10.txt"/>
					<artwork type="svg" src="IndexList-10.svg"/>
				</artset>
			</figure>

			<t>
				ABNF:
			</t>
			<sourcecode>
HeaderIndex          = HeaderIndexHeader:32 ArrayOfHID*
                       PhoenixString* BodyPartIndex*

                       ; One HID (HeaderID) for each match header
                       ; in the LID provided. Padded out to multiples
                       ; of 32-bits.
HeaderIndexHeader:32 = ID-CNT:8 Body-Count:8
                       / (HID HID)
                       / (HID 0x00:8)
                       / (0x00:8 0x00:8)

ArrayOfHid           = HIDEntry*

BodyPartIndex        = BodyPartOffset:32 HeaderIndexHeader:32 PhoenixString*
                       BodyPartIndex*

ID-CNT:8               ; The number of headers found in the
                       ; MIME object and requested in the interested
                       ; header list.

Body-CNT:8             ; The number of body parts in the object

                       ; Padded out to multiples of 32-bits.
HidEntry             = (HID:8 HID:8 HID:8 HID:8)
                       / (HID:8 HID:8 HID:8 0x00:8)
                       / (HID:8 HID:8 0x00:8 0x00:8)
                       / (HID:8 0x00:8 0x00:8 0x00:8)
			</sourcecode>
			<t>
				Where:
			</t>
			<t>
				HeaderIndex: The header index starts with a 32-bit unsigned
				integer in network byte order, the HeaderIndex:32.
			</t>
			<t>
				HeaderIndex:32: Contains 0, 1, or 2 HID values.
				They are in the order found in the object.
			</t>
			<t>
				ArrayIfHID: Keeps repeating until all of the
				headers in the list have been found in the message.
				The last one pads with zeros when needed.
			</t>
			<t>
				BodyPartIndex: When the object has body parts,
				there will be a BodyPartIndex for each body part,
				in the order they are in the object.
				The first 32-bits are the offset to the start
				of the body part. This does not include any boundary.
			</t>
			<t>
				Body parts themselves may contain body parts,
				they are recursively included as needed.
			</t>
		</section>
		<section>
			<name>Header Index Example 1</name>
			<t>
				For example, if the client requested MIME object indexes for the
				"From",	"Subject", "To", "Message-ID",
				"Content-Type", "MIME-Version", and "Date"
				header values.
			</t>
			<t>
				Assume this is an RFC-822 message with no body parts.
				So the body part header index has a count of zero (0).
				And the HID values assigned by the client when opening
				the folder are:
			</t>
			<ul>
				<li>From: 0</li>
				<li>Subject: 1</li>
				<li>To: 2</li>
				<li>Message-ID: 3</li>
				<li>Content-Type: 4</li>
				<li>Data: 5</li>
				<li>MIME-Version: 6</li>
			</ul>
			<t>
				In the Message each line is terminated with a carriage
				return and line feed:
			</t>
			<sourcecode>
<![CDATA[
From: Doug@example.com
To: Notices@example.com, Supervisors@example.com, Dave@example.com
Date: Thu, 06 Feb 2025 20:29:35 +0000
MessageID: <7324e0b9-f6dc-3c9b-a02f-0b2b824e863c@example.com>
Subject: A new draft of Phoenix has been published.
Content-Type: text/plain

A new draft has been published.

]]>										 
			</sourcecode>

			<figure anchor="HeaderIndexFigure1" align="center">
				<name>Header Index</name>
				<artset>
					<artwork type="ascii-art" src="IndexList-08.txt"/>
					<artwork type="svg" src="IndexList-08.svg"/>
				</artset>
			</figure>
		</section>
		
		<section>
			<name>Header Index Example 2</name>
			<t>
				For example, if the client requested MIME object indexes for the
				"From",	"Subject", "To", "MIME-Version", and "Content-Type".
				header values.
			</t>
			<t>
				And when the folder was opened, the client asked for
				the "Content-Type" header.
			</t>
			<t>
				Assume this is a MIME message with two body parts.
				So the body part header index has a count of two (2).
				And the HID values assigned by the client when opening
				the folder are:
			</t>
			<ul>
				<li>From: 8</li>
				<li>Subject: 12</li>
				<li>To: 4</li>
				<li>Content-Type: 3</li>
				<li>MIME-Version: 9</li>
			</ul>
			<t>
				In the Message each line is terminated with a carriage
				return and line feed:
			</t>
			<sourcecode>
<![CDATA[
From: User@example.com
To: User2@example.com
Subject: This is the subject of a sample message
MIME-Version: 1.0
Content-Type: multipart/alternative; boundary="XXXXboundary text"

--XXXXboundary text
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: quoted-printable

This is the body text of a sample message

--XXXXboundary text
Content-Type: text/html; charset="utf-8"
Content-Transfer-Encoding: quoted-printable

This is the body text of a sample message.
--XXXXboundary text--￼

]]>										 
			</sourcecode>

			<figure anchor="HeaderIndexFigure2" align="center">
				<name>Header And Body Part Index</name>
				<artset>
					<artwork type="ascii-art" src="IndexList-09.txt"/>
					<artwork type="svg" src="IndexList-09.svg"/>
				</artset>
			</figure>
		</section>

	</section>
</section>
