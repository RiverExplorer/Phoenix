<!-- Copyright 2025 RiverExplorer LLC and Douglas Mark Royer -->

<section xmlns:xi="http://www.w3.org/2001/XInclude">
	<name>Commands Overview - Packet and Reply</name>
	<t>
		In addition to the protocols listed in this specification.
		Additional protocols and commands can be added in the future.
		They must follow the same framework listed here.
	</t>
	<t>
		This protocol connects two endpoints over a network and facilitates
		the secure and authorized transfer of MIME objects.
	</t>
	<t>
		This is a binary protocol.
		The payload can be anything, text or binary.
		This protocol was designed to reduce the number of back and forth
		requests and replies between the client and server.
		By using XDR as the format for transferring binary control
		information it is portable to any computer architecture.
		Appendix XXX has the rpcgen definition for the protocol
		defined in this specification.
	</t>
	<t>
		The basic connection starts in one of two modes.
	</t>
	<ul>
		<li>
			An account is connecting to a server for the first time
			and does not know which authentication methods the
			server supports.
		</li>
		<li>
			An account has authenticated to a server in the past or the
			client is already aware of a valid authentication protocol
			to use.
		</li>
	</ul>
	<t>
		When connection is made, the server waits for a packet from
		the client.
		It will be one of two kinds.
	</t>
	<ul>
		<li>A pre authentication capability packet (CAPABILITY_PRE).</li>
		<li>An authentication packet. (AUTH...).</li>
	</ul>
	<t>
		If the first packet the server receives
		is a pre authentication capability packet,
		The server examines the clients packet and determines what
		authentication options to present to the client.
		The server then sends back its pre authentication capability packet
		which includes the supported authentication methods.
		Then the client, using the information from the server starts
		the authentication process.
	</t>
	<t>
		If the first packet the server receives is any of the supported
		authentication packets, then the server processes the authentication
		packet.
		On failure to authenticate, the server sends the client a pre
		authenticatin capability packet with the same sequence number
		that was in the authentication attempt and includes the
		servers supported authentication methods.
		On a successful authentication, the server sends the client
		a post authentication capability packet with a new sequence number.
	</t>
	<t>
		After the connection is successful and authenticated, ether endpoint
		may send commands to the other endpoint.
		When the server initiates an unsolicited command, it could be a
		any kind of notification or message for the client side application
		or the user. It could be reporting errors or updates to
		previous client initiated commands.
	</t>
	<t>
		All commands initiated from the client have even
		numbered command sequence numbers.
	</t>
	<t>
		All commands initiated from the server have odd
		numbered command sequence numbers.
	</t>
	<t>
		Some commands expect a command reply.
		Other commands do not expect a command reply.
		An example of a command that expects a reply is the ping command.
		An example of a command that does not expect a reply is the keep-alive
		command.
		Conceptually there are two kinds of commands:
	</t>
	<dl>
		<dt>Directive commands:</dt>
		<dd>
			A directive type command expects the other endpoint to process
			the command and possibly reply with some results.
			An example could be: Send me an index of my emails in my InBox.
			The client would expect a result.
			Another example is a bye command, once sent, no reply is expected.
		</dd>
		<dt>Request commands:</dt>
		<dd>
			A request type command may or might not have any reply.
			For example, a keep-alive command is a request to not
			timeout and has no reply.
			And a send new email notifications command would expect
			zero or more replies and it would not require them, as they
			might not happen.
		</dd>
	</dl>
	<t>
		These are not specific protocol entities, these concepts will
		be used to describe the expected behavior when one of these
		are transmitted.
	</t>
	<section anchor="PACKET_SUMMARY">
		<name>Packet Overview</name>
		<t>
			All commands are sent in a packet.
			A packet has two parts:
		</t>
		<ol>
			<li>The packet header.</li>
			<li>The packet body.</li>
		</ol>
		<section>
			<name>Packet Header</name>
			<t>
				The packet header has one value, the total length
				of the packet body, and payload sent as an
				unsigned 32-bit integer	in network byte order.
				The length does not include its own length.
				It is the total length that follows the length value.
			</t>
			<table>
				<name>Packet Header ABNF/XDR Mapping</name>
				<thead>
					<tr>
						<th>
							Name
						</th>
						<th>
							Description
						</th>
						<th>
							XDR API
						</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							PacketHeader
						</td>
						<td>
							<t>
								The number of octets that follow this value that
								are part of this packet.
							</t>
						</td>
						<td>
							xdr_PacketHeader()
						</td>
					</tr>
				</tbody>
			</table>
			<section>
				<name>Packet Header ABNF</name>
				<t>
					ABNF:
				</t>
				<figure>
					<name>Packet Header ABNF</name>
					<xi:include href="include/03-PacketHeader-ABNF.xml"/>
				</figure>
			</section>
			<section>
				<name>Packet Header XDR</name>
				<t>
					XDR Definition:
				</t>
				<figure>
					<name>Packet Header XDR</name>
					<xi:include href="include/03-PacketHeader-XDR.xml"/>
				</figure>
			</section>
		</section>

		<section>
			<name>Packet Body (PacketBody)</name>
			<t>
				The packet body is divided into three parts:
			</t>
			<ol>
				<li>Sequence (SEQ)</li>
				<li>
					Command (CMD):
					Which can be one of ADMIN_CMD, AUTH_CMD, FILE_CMD,
					or PROTO_CMD.
				</li>
				<li>
					Payload (CmdPayload):
					The command specific data. 
				</li>
			</ol>
			<t>
				PacketBody details:
			</t>
			<table>
				<name>Packet Body ABNF/XDR Mapping</name>
				<thead>
					<tr>
						<th>
							Name
						</th>
						<th>
							Value
						</th>
						<th>
							Description
						</th>
						<th>
							XDR API
						</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							ADMIN_CMD
						</td>
						<td>
							%x00:31
						</td>
						<td>
							The payload is an administration command.
						</td>
						<td>
							xdr_ADMIN_CMD()
						</td>
					</tr>
					<tr>
						<td>
							AUTH_CMD
						</td>
						<td>
							%x01:31
						</td>
						<td>
							What follows in the payload, is an authentication command.
						</td>
						<td>
							xdr_AUTH_CMD()
						</td>
					</tr>
					<tr>
						<td>
							CMD
						</td>
						<td>
							1 bit + 31 bits.
						</td>
						<td>
							<t>
								The 1-bit, VENDOR_BIT or PHOENIX_BIT followed by one of
								the 31-bit: ADMIN_CMD, AUTH_CMD, FILE_CMD, or PROTO_CMD.
								For a total of 32-bits.
							</t>
							<t>
								<br/>
								A command (CMD) is a unsigned integer that
								specifics a unique operation that describes
								and defines the data that follows.
							</t>
							<t>
								<br/>
								The highest bit in the 32-bit value is
								a VENDOR_BIT or PHOENIX_BIT.
								So CMD covers vendor and phoenix commands.
							</t>
							<t>
								-Phoenix CMD range is: %x00000000-7fffffff.
							</t>
							<t>
								-Vendor CMD range is: 80000000-fffffffe.
							</t>
							<t>
								-With %xffffffff reserved for future expansions.
							</t>
						</td>
						<td>
							xdr_Cmd()
						</td>
					</tr>
					<tr>
						<td>
							CmdPayload
						</td>
						<td>
							Variable
						</td>
						<td>
							<t>
								The Payload is whatever data follows the command.
								In some cases it is a blob of opaque data.
								In other cases it is a structured XDR set of data.
								See the specific CMD for details.
							</t>
						</td>
						<td>
							xdr_CmdPayload()
						</td>
					</tr>
					<tr>
						<td>
							FILE_CMD
						</td>
						<td>
							%x03:31
						</td>
						<td>
							A FILE or FOLDER payload is included.
						</td>
						<td>
							xdr_FILE_CMD()
						</td>
					</tr>
					<tr>
						<td>
							PROTO_CMD
						</td>
						<td>
							%x04:31
						</td>
						<td>
							The payload includes one of many protocol packets.
						</td>
						<td>
							xdr_PROTO_CMD()
						</td>
					</tr>
					<tr>
						<td>
							NOT_SUPPORTED
						</td>
						<td>
							%x2b:31
						</td>
						<td>
							The endpoint is replying that the
							command sent with the SEQ value in this packet,
							was not a supported command or operation.
						</td>
						<td>
							xdr_NOT_SUPPORTED()
						</td>
					</tr>
					<tr>
						<td>
							SEQ
						</td>
						<td>
							uint32_t
						</td>
						<td>
							<t>
								The Command SEQ is a uint32_t.
								This SEQ is an even number when initiated from
								the client,	and an odd number when initiated
								from the server.
							</t>
							<t>
								The first SEQ value sent from the client is zero (0)
								and is incremented by two each time.
							</t>
							<t>
								The first SEQ value sent from the server is one (1)
								and is incremented by two each time.
							</t>
							<t>
								In the event an endpoint command SEQ reaches its maximum
								value, then its numbering starts over at zero (0) for
								the client and one (1) for the server.
								An implementation must keep track of outstanding
								commands and not accidentally re-issue the same
								SEQ that may still get replies from the other endpoint.
							</t>
						</td>
						<td>
							xdr_SEQ()
						</td>
					</tr>
					<tr>
						<td>
							PacketBody
						</td>
						<td>
							Variable
						</td>
						<td>
							<t>
								The packet body.
							</t>
						</td>
						<td>
							xdr_PacketBody()
						</td>
					</tr>
				</tbody>
			</table>

			<t>
				A command conforming to this specification is not
				a vendor command.
				A command created by any vendor that implements
				vendor specific commands or operations is a vendor
				command.
				Vendor commands have the VENDOR_BIT set in the
				commands or operations.
				And vendor commands MUST have a Length value
				that follows the command that indicates how
				many octets follow the length.
				This is so that implementations that do not understand
				the vendor extension can skip that many more octets
				to find the next command or operation.
			</t>
			<t>
				If any operation in a command has the VENDOR_BIT set
				it may effect implementations that do not support that
				specific vendor operation.
				So caution must be used when creating vendor command
				operation extensions.
				If the vendor operation can not be performed by
				client conforming to this specification, then
				the command must also have the VENDOR_BIT set.
			</t>
			<t>
				In this example the server is sending a CAPABILITY_PRE
				command telling the client that the server supports
				AUTHMD5 and some made up vendor authentication AUTH_Vendor_3.
				The AUTHMD5 does not have the VENDOR_BIT set, and
				AUTH_Vendor_e has the VENDOR_BIT set.
			</t>
			<t>
				Clients or servers that are not using vendor specific
				extensions, can:
			</t>
			<ul>
				<li>Send a VENDOR_ID with the value as an	empty string.</li>
				<li>
					Or set the string, and just do not send
					any command or command operations with extensions.
				</li>
			</ul>
			<t>
				Clients that do not understand the string value in VENDOR_ID
				would ignore the commands and capabilities with the
				VENDOR_BIT set.
				Which is AUTH_Vendor_3 in this example.
			</t>
			<t>
				This is an example of a CAPABILITY_PRE being sent
				from the server to the client.
				A conforming client could ignore the AUTH_Vendor_3
				and authenticate with AUTHMD5.
			</t>
			<figure>
				<name>Packet Body Non-Vendor- Diagram</name>
				<artset>
					<artwork align="center" type="ascii-art" src="Drawings/Packet-01.txt"/>
          <artwork align="center" type="svg" src="Generated/Packet-01.svg"/>
				</artset>
			</figure>
			
			<t>
				In this example, the server is telling the
				client that it is using a vendor specific AUTHMD5
				and a vendor specific AUTH_Vendor_e only.
			</t>
			<t>
				When when vendor specific extensions make the connection
				incompatible with implementations conforming to this
				specification, then it MUST also set the VENDOR_BIT in the command.
				In this example it is being set in the CAPABILITY_PRE command.
				A conforming client would then know that there are zero compatible
				authentication methods to this server.
				A client implementations that understand the contents of the string
				value for VENDOR_ID, may also understand these extensions.
			</t>
			<t>
				After each entry that has the VENDOR_BIT set, the next
				value must be a Length indicating how many octets of data
				follow the Length, even when zero.
			</t>
			<figure anchor="P01-01">
				<name>Packet Body Vendor - Diagram</name>
				<artset>
					<artwork align="center" type="ascii-art" src="Drawings/Packet-01-01.txt"/>
          <artwork align="center" type="svg" src="Generated/Packet-01-01.svg"/>
				</artset>
			</figure>

			<t>
				And the matching data for <xref target="P01-01"/> could be (assuming
				all vendor extensions have 0 octets
				of additional data):
			</t>				
			<figure>
				<name>Packet Body Vendor - Diagram Data</name>
				<artset>
					<artwork align="center" type="ascii-art" src="Drawings/Packet-01-02.txt"/>
          <artwork align="center" type="svg" src="Generated/Packet-01-02.svg"/>
				</artset>
			</figure>

			<t>
				Multiple commands may be sent in one packet.
				And PHOENIX and non-vendor (NON-PHOENIX) commands may be sent
				in one packet body by setting VENDOR_BIT (1)
				or PHOENIX_BIT (0) in the packet.
				This example shows two commands, one that is a PHOENIX command
				the other is a vendor command.
			</t>
			<figure>
				<name>Packet Body Multiple Commands - Diagram</name>
				<artset>
					<artwork align="center" type="ascii-art" src="Drawings/Packet-03.txt"/>
          <artwork align="center" type="svg" src="Generated/Packet-03.svg"/>
				</artset>
			</figure>
			
			<section>
				<name>Packet Body ABNF</name>
				<t>
					ABNF:
				</t>
				<figure>
					<name>Packet Body ABNF</name>
					<xi:include href="include/04-PacketBody-ABNF.xml"/>
				</figure>
			</section>
			<section>
				<name>Packet Body XDR</name>
				<t>
					XDR Definition:
				</t>
				<figure>
					<name>Packet Body XDR</name>
					<xi:include href="include/04-PacketBody-XDR.xml"/>
				</figure>
			</section>

			<section>
				<name>Multiple Commands per Packet</name>
			</section>
		</section>
			
	</section>
	<section anchor="PACKET_REPLY_SUMMARY">
		<name>Packet Reply Overview</name>
		<t>
			All replies to a command are also a command packet.
			They contain the same command SEQ and command
			as the original packet.
			The endpoint recognizes it is a reply because:
		</t>
		<ul>
			<li>
				The	command SEQ matches one that is waiting a reply.
			</li>
			<li>
				When the client gets an even numbered SEQ, it can only
				be a reply.
			</li>
			<li>
				When the server gets an odd numbered
				SEQ, it can only be a reply.
			</li>
		</ul>
		<t>
			Some commands have zero to many replies.
			Each of these multiple replies contains the same SEQ as the
			original command. An example, the client sends a request
			to be notified when new email arrives and uses command
			SEQ 20. Each time a new email arrives, a reply will
			be sent from the server with a command SEQ of 20.
			And over time, the client may get many with a SEQ of 20
			as new emails arrive on the server.
		</t>
		<t>
			And like the original command, multiple replies may be
			in one packet.
		</t>
	</section>
</section>
