  <dl newline="true">
    <!-- Omit newline="true" if you want each definition to start on the sa\
me line as the corresponding term -->
		<dt>AdminCmd</dt>
		<dd>
			A general term for any administrative command.
			Administrative and auditing operations.
			This list includes commands for authorized users to configure,
			query logs, errors,	possibly user activity.
		</dd>
		<dt>AuthCmd</dt>
		<dd>
			A general term for any authentication command.
			Authentication and authorization operations.
			These operations authenticate users and verity their authorization
			access.
		</dd>
		<dt>Body Part ID</dt>
		<dd>	
			A unique ID for a MIME Object.
			This is an unsigned 32-bit integer in network byte order
			that is assigned by the server and sent to the client
			on a successful folder open.
			This ID persists across connections.
			And as long as the MIME object does not get altered in any way,
			this ID is valid and persists across servers.
			It is the offset in octets from the beginning of the
			message to the start of the body part.
			<br/>
			<xref target="Index-Ref">See Index.</xref>
		</dd>
    <dt>Command, CMD</dt>
    <dd>
			A specific protocol operation, or command.
			They are broken down into, AdminCmd, AuthCmd, FileCmd,
			and ProtoCmd.
			These are called a CMD or command.
		</dd>
		<dt>FileCmd</dt>
		<dd>
			A general term for any file or folder command.
			This include creating, getting, modifying, deleting, moving,
			and renaming files.
		</dd>
		<dt>Folder ID</dt>
		<dd>
			A unique ID for a MIME folder.
			This is an unsigned 32-bit integer in network byte order
			that is assigned by the server and sent to the client
			on a successful folder open.
			This ID persists across connections to the same server.
			Once a folder has an ID, it never changes on a server
			as described in <xref target="FOLDERS">Folders</xref>.
			<br/>
			<xref target="Index-Ref">See Index.</xref>
		</dd>
		<dt anchor="Index-HH">Header ID</dt>
		<dd>
			An offset into a MIME object where a specific header starts.
			As the position in a MIME object is unique, this value
			is also used as the ID to a specific header.
			As long as the MIME object does not change in any way
			this ID persisists across connections and servers.
			<br/>
			<xref target="Index-Ref">See Index.</xref>
		</dd>
		<dt anchor="Index-HVH">Header Value ID</dt>
		<dd>
			Related to Header ID.
			An offset into a MIME object where a specific header value starts.
			As the position in a MIME object is unique, this value
			is also used as the ID to a specific header value.
			As long as the MIME object does not change in any way
			this ID persisists across connections and servers.
			<br/>
			<xref target="Index-Ref">See Index.</xref>
			<br/>
			<xref target="Index-Ref">See Header ID.</xref>
		</dd>
		<dt>HIDX</dt>
		<dd>
			Header Index type.
			A command sent as part of a folder open command that tells the
			server which MIME headers it would like indexed.
		</dd>
		<dt anchor="Index-Ref">Index</dt>
		<dd>
			<t>
				This wire protocol transmits all or part of MIME objects.
				Various parts can be referenced by an offset into the object.
				This is an index into the MIME objects.
				A client may request an index be used when opening a folder.
			</t>
			<t>
				<em>Note</em>:	
				None of these index values are guaranteed to persist across
				re-connections to the server,
				as other clients may have altered the contents.
			</t>
		</dd>
		<dt>LID</dt>
		<dd>
			List ID.
			In operations that require a list or set of data.
			This ID uniquely identifies which list or set is in context.
		</dd>
    <dt>Media Type</dt>
    <dd>
			Each MIME object has a media type that identifies the
			content of the object.
			This specification does not add, remove, or alter any MIME media type;
		</dd>
    <dt>MIME</dt>
    <dd>
			This protocol transports MIME objects.
			This specification does not remove or alter any MIME objects;
		</dd>
		<dt>Offset</dt>
		<dd>
			Unless otherwise specified, an offset is an unsigned 32-bit
			integer in network byte order.
		</dd>
		<dt>Packet</dt>
		<dd>
			A packet is a blob of data that has a header (its length)
			followed	by a Phoenix command with all
			of its values and parameters.

			Packets flow in both directions and asynchronously.
			Commands can be sent while still waiting for other replies.

			Each endpoint may send commands to the other endpoint without
			having to be prompted to send information.
		</dd>
    <dt>Parameter</dt>
    <dd>
			Most commands have values that are associated with them.
			These values are called parameters.
			For example, the create folder command has the name of the new
			folder to be created as a parameter.
		</dd>
    <dt>ProtoCmd</dt>
    <dd>
			A general term for all protocol commands.
			This also includes commands that do not fall into one of
			the other categories described here in this definitions section.
		</dd>
    <dt>SEQ, Command Sequence, CMD_SEQ</dt>
		<dd>
			Each command has a unique identifier, a sequence number.
			All replies to a command include the same sequence number
			as the original command.
			In this way replies can be matched up with their original command.
		</dd>
		<dt>SSL</dt>
		<dd>
			For the purpose of this specification, SSL is interchangeable
			with TLS.
			This document uses the term TLS.
			The sample implementation uses both SSL and TLS because
			the legacy UNIX, Linux, Windows, and OpenSSL code
			uses the term SSL as well as TLS.
		</dd>
		<dt>TLS</dt>
		<dd>
			A way of securely transporting data over the Internet.
			See RFC-xxxx.
		</dd>
    <dt>XDR</dt>
    <dd>
			<t>
				RFC-4506 specifies a standard and compatible way to transfer
				binary information.
				This protocol uses XDR to transmit a command, its values
				and any parameters and replies.
				The MIME data, the payload, is transported as XDR opaque,
				and is unmodified.
			</t>
			<t>
				<em>Note</em>: XDR transmits data in 32-bit chunks.
				An 8-bit value is transmitted with the lower 8-bits
				valid and the upper 24 bits set to zero.
				A 16-bit value is transmitted with the lower 16-bits
				valid and the upper 16 bits set to zero.
			</t>
			<t>
				So many of these protocol elements pack one or more
				of its parameters into one 32-bit value.
				As defined in each section.
				In many cases pseudo code is shown on how to pack the
				date and create the protocol element.
			</t>
			<t>
				SEE RFC-4506 section 3.
			</t>
		</dd>
  </dl>
