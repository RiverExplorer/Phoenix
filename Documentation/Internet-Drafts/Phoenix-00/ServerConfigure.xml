<!-- Copyright 2025 RiverExplorer LLC and Douglas Mark Royer -->
<section xmlns:xi="http://www.w3.org/2001/XInclude">
	<name>Administration - SERVER_CONFIGURE (0x00:8)</name>
	<t>
		Remote administration of servers is an essential feature
		in modern systems.
		An implementation that supports SERVER_CONFIGURE
		adds SERVER_CONFIGURE to the post authentication
		capability command sent from the server to the client.
		The server implementation only sends this capability
		to authenticated and authorized users.
		Users can become authorized with the
		USER_PERMISSIONS command, or by server implementation
		specific configuration methods.
		Server specific configuration methods are out of
		scope for this specification.
	</t>
	<t>
		Server specific configuration options are unique to
		each server implementation.
		This specification defines a method to set, update,
		delete, and view server configuration values.
	</t>
	<t>
		A client implementation would generally only
		support its own matching server implementation.
		The client sends a VENDOR_ID capability
		with a string that the server implementation will check
		to see it is a compatible client. The value is out of
		scope to this specification.
		If the client does not send the correct VENDOR_ID information,
		or the authentication user is not authorized,
		then the server would not send its SERVER_CONFIGURE
		capability back to the client in the post authentication
		capability list.
	</t>
	<t>
		If a client or user is not authorized, then all
		SERVER_CONFIGURE ADMIN command will be rejected
		with a NotSupported Packet with the SEQ number
		the same as in the SERVER_CONFIGURE ADMIN commmand
		sent to the server.
	</t>
	<t>
		The SERVER_CONFIGURE ADMIN command sends and receives the configuration
		information in key + value pairs.
		The key and value are each a string.
		The values uses in the key or value are vendor specific and
		out of scope in this specification.
	</t>
	<t>
		This specification does not define any configuration
		information.
		It provides a common way to set, get, update, and delete them.
	</t>
	<t>
		Multiple SERVER_CONFIGURE commands can be sent in the
		same ADMIN packet.
		They are processed in the order sent.
	</t>
	
	<table>
		<name>SERVER_CONFIGURE - ABNF/XDR Mapping</name>
		<thead>
			<tr>
				<th>
					Name
				</th>
				<th>
					Description
				</th>
				<th>
					XDR API
				</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>
					ConfigOp
				</td>
				<td>
					Indicates if the key/value pairs are to
					get, set, update, or be deleted.
				</td>
				<td>
					xdr_ConfigOp()
				</td>
			</tr>
			<tr>
				<td>
					ConfigSet
				</td>
				<td>
					A set of key/value paris with the same ConfigOp.
					Allows the client to bundle multiple
					key/paris per ConfigOp.
				</td>
				<td>
					xdr_ConfigSet()
				</td>
			</tr>
			<tr>
				<td>
					ServerConfigure
				</td>
				<td>
					The ADMIN operation that sets and gets
					server configuration information.
				</td>
				<td>
					<t>
						xdr_ServerConfigure();
					</t>
				</td>
			</tr>
		</tbody>
	</table>

	<section>
		<name>SERVER_CONFIGURE - ABNF</name>
		<figure>
			<name>SERVER_CONFIGURE - ABNF</name>
			<xi:include href="include/06-ServerConfigure-ABNF.xml"/>
		</figure>
	</section>

	<section>
		<name>SERVER_CONFIGURE - XDR</name>
		<figure>
			<name>SERVER_CONFIGURE - XDR</name>
			<xi:include href="include/06-ServerConfigure-XDR.xml"/>
		</figure>
	</section>

</section>
