<!-- Copyright 2025 RiverExplorer LLC and Douglas Mark Royer -->
<section xmlns:xi="http://www.w3.org/2001/XInclude">
	<name>Authentication - Certificate</name>
	<t>
		There are two kinds of AUTHCERT.
	</t>
	<ul>
		<li>
			Authentication by TLS certificate at connection time.
			This is called an AUTHCERT_TLS.
		</li>
		<li>
			Authentication challenge and response after connection time.
			This is called an AUTHCERT_USER. 
		</li>
	</ul>

	<section>
		<name>Authentication - Certificate - Capability</name>
		<t>
			When the server sends the AUTHCERT capability to the
			client, it is followed by two "enabled" values.
			One for AUTHCERT_TLS and the other for AUTHCERT_USER.
		</t>
		
	</section>

	<section>
		<name>AUTHCERT_TLS</name>
		<t>
			When the client connects to the server, it uses a
			pre authorized digital certificate for the TLS connection.
		</t>
		<t>
			The certificate itself could be sufficient.
			Or the server may look into the contents of the client
			public certificate supplied at TLS connection time
			for information to help it determine the level of trust,
			including none.
		</t>
		<t>
			The server could be configured to accept self-signed
			certificates, or it may be configured to verify
			a certificate chain to a root certificate it trusts.
			Or some combination.
		</t>
		<t>
			A server could be configured to only allow AUTHCERT_TLS
			from a subset of IP addresses or networks.
		</t>
		<t>
			When the client successfully authenticates using AUTHCERT_TLS,
			then the server replies with a CAPABILITY_POST
			command to the client. And no CAPABILITY_PRE
			command is sent by the server.
		</t>
		<t>
			When a client fails the AUTHCERT_TLS, then the
			server sends a CAPABILITY_PRE command	to the client.
			The client can then proceed with other authentication
			methods that were provided in the capability list supplied by
			the server.
		</t>
		<t>
			When a client gets a CAPABILITY_POST command from the
			server after connection, without having sent any
			authentication commands, the the client knows it has
			been authenticated with AUTHCERT_TLS.
		</t>
		<t>
			Clients expecting an AUTHCERT_TLS must wait for
			the CAPABILITY_POST or CAPABILITY_PRE command before
			continuing with client operations with associated
			folders and files.
		</t>
		<t>
			When a client that was not expecting an AUTHCERT_TLS
			gets a CAPABILITY_POST after connection
			and did not get a CAPABILITY_PRE, then the client know
			they are authenticated using the supplied TLS certificate.
		</t>
	</section>
	
	<section>
		<name>AUTHCERT_USER</name>
		<t>
			This authentication method still requires a valid TLS
			connection certificate, as it does with all connections.
			It also requires that the client send a public certificate
			to the server as a separate authentication step for the
			user.
		</t>
		<t>
			This type of login could be used when traveling or
			the server requires more control over security.
			The users certificates could be under the control
			of the users company, and easier to create and
			revoke than traditional certificate sources.
		</t>
		<t>
			In order for AUTHCERT_USER to work, the server MUST
			already have the users public certificate.
			This could have been setup by a servers implementation
			configuration files, or from a previous successful
			non-AUTHCERT_USER connection where the client informed
			the server of the users public certificate.
		</t>
		<t>
			To authenticate with a AUTHCERT_USER,
			the client sends a AUTHCERT_USER command with
			a clear text token over the TLS connection, followed by a
			the both the secret login name and password encrypted with
			the users private certificate.
		</t>
		<t>
			The token could be one time, or reusable.
			The server implementation is the authority on the token
			and token usage.
			It could be possible that the user never knows the
			actual login and password.
			They could be installed on a device for the user.
			They, perhaps, go to a web page, or other method to get the token.
			Then perhaps enter their personal password to allow
			access to the certificates and secret login information
			that is installed and already encrypted on the client.
		</t>
		<t>
			The server decrypts the users login name
			and password with the users public certificate
			selected from the clear text token sent.
		</t>
		<t>
			If the decrypted user login and password match
			what is expected, then the authentication is successful and
			the server replies with a CAPABILITY_POST
			command.
		</t>
		<t>
			If the authentication fails, then the server replies
			back with a AUTHCERT_USER with the same SEQ number
			and the token, login name, and password empty and
			with their lengths set to zero.
		</t>
		<figure>
			<name>AUTHCERT_USER</name>
			<artset>
				<artwork type="ascii-art" src="AUTHCERT-02.txt"/>
				<artwork type="svg" src="AUTHCERT-02.svg"/>
			</artset>
		</figure>
	</section>

	<section>
		<name>Certificate Management</name>
		<t>
			A Phoenix server may use AUTHCERT_USER authentication.
			When it does, it needs a way for the user, if authorized
			to upload their public certificate to the server.
			This can be enabled or disabled by server configuration
			on the site, per user, or any other rules implemented
			in the server.
		</t>
		<t>
			User certificate management can only be used after
			the user has authenticated with the server.
		</t>
	</section>
</section>
