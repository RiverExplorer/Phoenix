<!-- Copyright 2025 RiverExplorer LLC and Douglas Mark Royer -->

<section anchor="CAPABILITY"  xmlns:xi="http://www.w3.org/2001/XInclude">
	<name>Capability Commands Summary</name>
	<t>
		The purpose of this protocol is to facilitate the transfer
		of MIME objects, not to define how they are used.
		Capabilities allow each endpoint to ensure the other
		endpoint is capable of transferring the desired content
		and optionally allow control of the other endpoint.
	</t>
	<t>
		Capabilities are attributes of both a client and server
		implementation.
		Some may provide a superset or subset when compared
		to other implementations.
		This can be done to split workload or just because
		they specialize in specific operations.
	</t>
	<t>
		A capability is a 31-bit unsigned integer.
		Plus a 1-bit identifier signifying if it is a Phoenix capability
		or vendor specific capability, for a total of 32-bits.
	</t>
	<t>
		This specification describes several capabilities.
		Some are described in other sections, and some are
		described in this section.
		See the <xref target="CapabilityIndex">Capability Index</xref>
		for a complete list	in this specification.
	</t>
	<t>
		These are not a negotiation.
		Each sends their abilities to the other.
	</t>

	<t>
		Capabilities from the server are sent once or twice.
		Optionally one before the user is authenticated (CAPABILITY_PRE),
		and once after (CAPABILITY_POST).
		If a user logs out and stays connected, then the process starts
		over with the server assuming a new client just connected.
	</t>
	<t>
		Capabilities from the client may be sent, zero, once, or twice
		per authentication process.
		Optionally once included with the AUTH command packet (CAPABILITY_PRE),
		to inform the	server of any required vendor or authentication
		specific information.
		And optionally once after the user is authenticated (CAPABILITY_POST).
	</t>
	<t>
		There is no requirement that a server provides
		an authentication method for any client.
		There is no requirement that a server provide
		any non-vendor capability for any client.
		They could be configured to only allow vendor
		specific authentication or only vendor specific commands because they
		are not servers open to the public and require
		non standard authentication methods,
		or only from clients providing a correct CAPABILITY_PRE
		value.
	</t>
	<t>
		<em>NOTE: Vendor specific capabilities MUST include a Length
		value after the capability value.
		This is because there is no way a non compatible implementation
		could calculate the length of the data that would follow it
		in order to find the next capability or command in the packet.
		</em>
	</t>

	<t>
		Table <xref target="PreAuthCap"/> lists some CAPABILITY_PRE
		capabilities.
	</t>

	<t>
		Some capabilities have data associated with them, others do not.
	</t>
	<section>
		<name>Capability - CAPABILITY_PRE</name>
		<t>
			Pre authentication capabilities are sent before authentication.
		</t>
		<t>
			The only CAPABILITY_PRE that the client sends to the server
			in this specification is optionally the VENDOR_ID.
			Vendors may add new client to server capabilities as long
			as they set the VENDOR_BIT in the command and are implemented
			to understand that not all server will understand their
			vendor specific extensions.
		</t>
		<table anchor="PreAuthCap">
			<name>Capabilities - CAPABILITY_PRE</name>
			<thead>
				<tr>
					<th>Name</th>
					<th>Value</th>
					<th>Value Type</th>
					<th>Description</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td>AUTHANONYMOUS</td>
					<td>%x26:31</td>
					<td></td>
					<td>
						<t>
							No authentication required.
							An example usage could be a shared company
							bulletin board where most employees had
							view only access to the messages.
							And perhaps the server only allowed
							company local IP addresses to use this
							authentication method.
						</t>
						<t>
						</t>
					</td>
				</tr>
				<tr>
					<td>AUTHMD5</td>
					<td>%x10:31</td>
					<td></td>
					<td>
						<t>
							Authenticate by providing an account name
							and an MD5 password.
						</t>
					</td>
				</tr>
				<tr>
					<td>AUTHCERT_TLS</td>
					<td>%x27:31</td>
					<td>
						CMD_e
					</td>
					<td>
						<t>
							Authenticate using the connection TLS certificate.
						</t>
					</td>
				</tr>
				<tr>
					<td>AUTHCERT_USER</td>
					<td>%x28:31</td>
					<td>
						CMD_e
					</td>
					<td>
						Like AUTHMD5, an account and password are provided
						in the payload and they are encrypted with a
						prearranged certificate.
						The server must already have the accounts public certificate.
					</td>
				</tr>
				<tr>
					<td>VENDOR_ID</td>
					<td>%x12:31</td>
					<td>string</td>
					<td>
						<t>
							VENDOR_ID includes a vendor ID
							string that can be used to help the server determine
							if it will send a post-authentication ADMIN capability
							or other vendor specific abilities.
						</t>
						<t>
							The specific string value is determined by the server
							implementation and is out of scope for this specification.
						</t>
					</td>
				</tr>
			</tbody>
		</table>
	</section>

	<section>
		<name>Capability - CAPABILITY_POST</name>
		<t>
			Table <xref target="PostAuthCap"/> lists the CAPABILITY_POST
			capabilities.
			Post-Authentication capabilities are sent to the client aftera
			a user authenticates.
		</t>
		<t>
			A client or server may or might not also send an additional CAPABILITY_POST command
			as account permissions change.
		</t>
		<t>
			For example after authentication an administrator could give the
			current user more permissions.
			At that time the server would send a new CAPABILITY_POST to the client.
			Or perhaps the client needs to update the server with a new VENDOR_ID
			and CAPABILITY_POST after a license key is installed.
			Or perhaps remove capabilities after business hours.
		</t>

		<table anchor="PostAuthCap">
			<name>Capabilities - CAPABILITY_POST</name>
			<thead>
				<tr>
					<th>Name</th><th>Value</th><th>Description</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td>x</td><td>x1</td><td>x2</td>
				</tr>
			</tbody>
		</table>
	</section>
</section>

